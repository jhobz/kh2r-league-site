---
import type { ImageMetadata } from 'astro'
import type { CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'

interface Props {
    worlds: Array<CollectionEntry<'randoRoute'>>
    expanded?: boolean
    controls?: boolean
}

const ASSET_PATH = '../assets/televo/worlds'
const worldIcons = import.meta.glob<{ default: ImageMetadata }>(
    '../assets/televo/worlds/*.png' // string literals only in import.meta.glob
)
const { worlds, expanded, controls } = Astro.props
const bossClasses = [
    'bg-linear-to-r from-(--color-highlight) to-transparent',
    'text-(--color-fill)',
    'uppercase',
    'font-bold',
].join(' ')
---

<rando-timeline
    class="block max-w-150 mx-auto"
    data-expanded={expanded}
    data-controls={controls}
>
    {
        controls && (
            <div class="flex flex-row justify-end">
                <div class="join my-4">
                    <button class="btn btn-ghost join-item" id="expandBtn">
                        + ALL
                    </button>
                    <button class="btn btn-ghost join-item" id="collapseBtn">
                        - ALL
                    </button>
                    <button class="btn btn-ghost join-item" id="goaBtn">
                        GoA
                    </button>
                </div>
            </div>
        )
    }
    <ul class="timeline timeline-snap-icon timeline-compact timeline-vertical">
        {
            worlds.map(({ data: { world, rooms } }, i) => (
                <li data-world={world.abbr}>
                    {!!i && <hr class="py-2 -z-1" />}
                    <Image
                        class="timeline-middle cursor-pointer"
                        width={24}
                        height={24}
                        src={worldIcons[`${ASSET_PATH}/${world.name}.png`]()}
                        alt={`${world.name} icon`}
                    />
                    <section class="collapse timeline-end">
                        <input type="checkbox" />
                        <time class="collapse-title font-mono italic p-1">
                            {/* TODO: This will be a timestamp once the logger includes it */}
                            {new Date().toLocaleTimeString(['en-US'], {})}
                        </time>
                        <div class="collapse-content p-0">
                            <div class="rounded-box border-2 border-(--color-highlight) overflow-clip">
                                <header class="flex flex-row items-center uppercase text-xl sm:text-2xl bg-(--color-highlight) text-(--color-fill)">
                                    <Image
                                        class="p-1 w-[38px]"
                                        width={30}
                                        height={30}
                                        src={worldIcons[
                                            `${ASSET_PATH}/${world.name}.png`
                                        ]()}
                                        alt={`${world.name} icon`}
                                    />
                                    <h2>{world.name}</h2>
                                </header>
                                <ul class="list bg-(--color-fill)">
                                    {rooms.map(({ name, boss }) => (
                                        <li
                                            class={`list-row rounded-none py-1 ${boss && bossClasses}`}
                                        >
                                            {name}
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        </div>
                    </section>
                    {i < worlds.length - 1 && <hr class="-mt-2 -z-1" />}
                </li>
            ))
        }
    </ul>
</rando-timeline>

<style>
    [data-world='goa'] {
        --color-world: var(--color-world-goa);
    }
    [data-world='1aw'] {
        --color-world: var(--color-world-1aw);
    }
    [data-world='ag'] {
        --color-world: var(--color-world-ag);
    }
    [data-world='at'] {
        --color-world: var(--color-world-atl);
    }
    [data-world='bc'] {
        --color-world: var(--color-world-bc);
    }
    [data-world='dc'] {
        --color-world: var(--color-world-dc);
    }
    [data-world='ht'] {
        --color-world: var(--color-world-ht);
    }
    [data-world='hb'] {
        --color-world: var(--color-world-hb);
    }
    [data-world='tlod'] {
        --color-world: var(--color-world-lod);
    }
    [data-world='oc'] {
        --color-world: var(--color-world-oc);
    }
    [data-world='pr'] {
        --color-world: var(--color-world-pr);
    }
    [data-world='pl'] {
        --color-world: var(--color-world-pl);
    }
    [data-world='stt'] {
        --color-world: var(--color-world-stt);
    }
    [data-world='sp'] {
        --color-world: var(--color-world-sp);
    }
    [data-world='tt'] {
        --color-world: var(--color-world-tt);
    }
    [data-world='twtnw'] {
        --color-world: var(--color-world-twtnw);
    }

    [data-world] {
        --color-highlight: light-dark(
            oklch(from var(--color-world) calc(l * 0.1) c h),
            oklch(from var(--color-world) calc(l * 0.9) c h)
        );
        --color-fill: light-dark(
            oklch(from var(--color-world) calc(l * 0.9) c h),
            oklch(from var(--color-world) calc(l * 0.1) c h)
        );
    }

    .collapse-title,
    .collapse > input[type='checkbox'] {
        min-height: 1lh;
    }

    h2 {
        text-box-trim: trim-both;
    }
</style>

<script>
    class RandoTimeline extends HTMLElement {
        stops = this.querySelectorAll<HTMLImageElement>('.timeline-middle')
        checkboxes = this.querySelectorAll<HTMLInputElement>(
            'input[type="checkbox"]'
        )
        isGoaToggled = !!this.dataset.expanded

        connectedCallback() {
            this.stops.forEach((node) =>
                node.addEventListener('click', this.onClickToggleCollapse)
            )

            if (this.dataset.expanded) {
                this.toggleAll(true)
            }

            if (this.dataset.controls) {
                this.querySelector<HTMLButtonElement>(
                    '#expandBtn'
                )?.addEventListener('click', () => this.toggleAll(true))
                this.querySelector<HTMLButtonElement>(
                    '#collapseBtn'
                )?.addEventListener('click', () => this.toggleAll(false))
                this.querySelector<HTMLButtonElement>(
                    '#goaBtn'
                )?.addEventListener('click', () =>
                    this.toggleAll(!this.isGoaToggled, true)
                )
            }
        }

        onClickToggleCollapse(e: MouseEvent) {
            const image = e.target as HTMLImageElement
            const checkbox = image.parentElement?.querySelector(
                'input[type="checkbox"]'
            ) as HTMLInputElement
            checkbox.checked = !checkbox.checked
        }

        toggleAll(isChecked: boolean, goaOnly?: boolean) {
            let checks = this.checkboxes

            if (goaOnly) {
                checks = this.querySelectorAll<HTMLInputElement>(
                    '[data-world="goa"] input[type="checkbox"]'
                )
            }

            this.isGoaToggled = isChecked
            checks.forEach((c) => (c.checked = isChecked))
        }
    }

    customElements.define('rando-timeline', RandoTimeline)
</script>
